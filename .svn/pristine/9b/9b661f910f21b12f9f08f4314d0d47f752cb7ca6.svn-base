# Synthesis Mobile

This project is used as a client for the Synthesis Service


## Requirements

Node 4.2 or higher, with cordova and bower installed

`(sudo) npm install -g cordova`

[Git client ](https://git-scm.com/downloads)


## Installation
`npm install`


## Usage
Once ready to run on a device or emulator:

`cordova run android`

`cordova run ios`

To use developer mode you need to set an environment variable
Unix:

`export DEVELOPMENT=true; cordova run android`

Windows:

`set DEVELOPMENT=true; cordova run android`


### Building a release (Android Only)
From the command line, run the cordova build with the `--release` flag, and also make sure that DEVELOPMENT mode is not enabled

`export DEVELOPMENT=false; cordova build android --release`

The settings for the keystore must be configured in `build.json` (in the root of the project)

## Configuration

### Server connection
You might want to change the server the application is connecting too while developing (or when making a client branch)
To do this you need to edit 3 files to reflect your new server path.
1. `www/config.xml`
2. `src/www/index.html` - Edit the Content-Security-Policy
3. `src/scripts/base/SynthConfig.js` - baseURL

### Log Level
During development you might want to increase the log level.

See `src/scripts/base/SynthConfig.js` - logLevel

## Development environment
### Windows
[Register Device for Development](https://msdn.microsoft.com/library/windows/apps/ff769508(v=vs.105).aspx)


## Development
### Source code
Content you will most often develop on, is in the `src` directory

Branding is located in the `branding` directory


## Build process technical info
The bulk of the build process is handled by a gulp script which is executed with a cordova hook on "before prepare"
This script takes care of compiling the less files, converting/combining/minifying javascript, and copying all the resources to the required location for cordova to take over.

The javascript files are writing with ES6 extentions. During the build process a babelify plugin is used to convert the files into standard ES5 commonjs files. Browserify is used to bundle these modules in a way that a website can use them.

When using development mode for your builds, you web inspector will use the sourcemaps to show you the paths to the original files (before the where converted).


## Setup push notifications

### Android API Configuration
1. Log in at [console.developers.google.com](https://console.developers.google.com)
2. Create a project
3. From the Dashboard, select "Use API"
4. Select "Cloud Messaging for Android" from the "Mobile APIs" section
5. Click "Enable API"

After completing the server side, follow these steps
1. Navigate to [Google Developers Portal](https://developers.google.com/mobile/add?platform=android)
2. Select your App's Name, enter the android package name EXACTLY as the "id" in your cordova config.xml
3. Select "CONTINUE TO Choose and configure services arrow_forward"
4. Select "Cloud Messaging", and Enable Cloud messaging
5. You will now see the Server API key - This should be configured on the Synthesis Server ("google.api.key")
6. And the "Sender ID" which must be configured on the mobile app (SynthConfig.androidSenderID)
7. You do not have to continue with the wizard, a config file is not required.

### iOS Server Certificates
You'll have to do these steps on a Mac
1. Log in at [Apple Developer Portal](https://developer.apple.com)
2. Click on "App IDs" at "Identifiers" on the left navigation
3. Click on the App ID for your application.
4. Check that "Push Notifications" are enabled,
4.1 if not, select edit, and tick the "Push Notifications" box
4.2 Select Create certificate for development
4.3 Follow the prompts to create the certificate, save all files generated and downloaded in the "keys" directory of the project. Use the "ios-dev" or "ios-prod" directories depending on the environment you are creating it for.
User email: Any email address (preferably your own)
Common name: Synthesis Push Development|Production
Request is: Saved to disk
4.4 From your keystore, export the private key, of the key you just created (Apple Push Services: <app id>) -> <app name> Push [Development|Production]. Export as .12 and save as "SynthesisMobile.p12" in the "keys" (ios-dev or ios-prod) directory of this project. Leave the password blank. This file will be saved as Certificates.p12
5. Now that you have all the keys, use the create_keys.sh script in the "keys" directory to generate the server key for you
navigate the "keys" directory and execute `./createKeys.sh`
(You might have to rename some files for the script to work)
6. Once done, you will have a "SynthesisMobile-development-server.p12" file which must be placed on the Synthesis Server
7. Configure

`push.apple.key.file=file:///opt/synthesis_home/SynthesisMobile-development-server.p12`

`push.apple.key.passphrase=<your password>`


TODOS:
Use cordova-promise-fs
Move icons to config
