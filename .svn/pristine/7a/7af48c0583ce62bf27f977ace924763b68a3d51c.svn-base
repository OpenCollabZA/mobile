'use strict';

/**
* Factory to create error with
*/
var SynthError = ($http) => {

	// Map of errors
	var errors = {};

	// When this factory is created, we get the errorMessages
	$http({ method : 'GET', url : 'base/data/errorMessages.json'})
		.then((data) => {
			errors = data;
		});

	/*
	* Return a function that will create an error that
	* can be used by the SynthErrorHandler.
	*
	* Params:
	* errorCode - an int representing the error code, or an object that represent the error
	* additional (optional) - a string with additional info about the error.
	*/
	return function(errorCode, additional){

		/*
		* Check if the error is an exception
		*/
		if(errorCode instanceof Error){
			let error = angular.copy(errors[1000]);
			error.additional = errorCode.message;
			return error;
		}
		/* Check if the error Code is an object.
		* if it is an object, it is a error like response from
		* a server, we will then create a proper error from it */
		else if (typeof(errorCode) === 'object'){
			return {
				'id' : errorCode.errorCode,
				'errorMessage' : errorCode.message,
				'errorInstruction' : errorCode.instruction,
				'additional' : additional
			};
		}
		else{
			let error = angular.copy(errors[errorCode]);
			// This will only happen if an error happened before the ajax to get
			// the error list was completed
			if(error == null){
				error = {
					'id' : 1000,
					'errorMessage' : 'Exception occurred',
					'errorDescription' : 'Your request could not be completed. Something unexpected had happened',
					'errorInstructions' : 'Please contact your administrator'
				};
			}
			if (additional){
				error.additional = additional;
			}
			return error;
		}

	};
};
SynthError.$inject = ['$http'];
export default SynthError;
